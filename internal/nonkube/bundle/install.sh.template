#!/bin/sh

set -Ceu

{{.SelfExtractPart}}

# Bundle installation and removal script

# site name to be provided by bundle generation
export SITE_NAME="{{.SiteName}}"
export SKUPPER_PLATFORM="podman"
export PLATFORM_COMMAND="podman"
export REMOVE=false
export DUMP_TOKENS=false

# standard output directories
if [ -z "${UID:-}" ]; then
    UID="$(id -u)"
    export UID
fi
export SKUPPER_OUTPUT_PATH="${XDG_DATA_HOME:-${HOME}/.local/share}/skupper"
export SERVICE_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/systemd/user"
export RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/${UID}}"
export SYSTEMCTL="systemctl --user"
export USERNS="keep-id"
GID=$(id -g "${UID}")
export RUNAS="${UID}:${GID}"
if [ "${UID}" -eq 0 ]; then
    export SKUPPER_OUTPUT_PATH="/usr/local/share/skupper"
    export SERVICE_DIR="/etc/systemd/system"
    export RUNTIME_DIR="/run"
    export SYSTEMCTL="systemctl"
    # shellcheck disable=SC2089
    export USERNS="''"
fi
export SITES_PATH="${SKUPPER_OUTPUT_PATH}/sites"
export PLATFORM_FILE="${SITES_PATH}/${SITE_NAME}/runtime/state/platform.yaml"
export USER="${USER:-$(id -un)}"
SITE_ID="$(hostname -s)-${USER}-$(date +%s)"
export SITE_ID

exit_error() {
    echo "$*"
    exit 1
}

usage() {
    echo "Usage: $0 [-p <podman|docker|systemd>] [-x] [-d <output-dir>]" >&2
    echo "    -p    platform to use (one of: podman, docker, systemd)" >&2
    echo "    -x    remove existing site definition" >&2
    echo "    -d    dump tokens from bundle to the provide output directory" >&2
    exit 1
}

parse_opts() {
    while getopts "xhd:p:" opt; do
        case "${opt}" in
            p)
                valid_platforms="podman docker systemd"
                export SKUPPER_PLATFORM="${OPTARG}"
                is_platform_valid=false
                for valid_platform in ${valid_platforms}; do
                    if [ "${valid_platform}" = "${SKUPPER_PLATFORM}" ]; then
                        is_platform_valid=true
                        break
                    fi
                done
                if [ ! "${is_platform_valid}" ]; then
                    echo "Invalid platform: ${SKUPPER_PLATFORM}"
                    usage
                fi
                if [ "${SKUPPER_PLATFORM}" = "docker" ]; then
                    export PLATFORM_COMMAND="docker"
                    if [ "${UID}" -ne 0 ]; then
                        # shellcheck disable=SC2090
                        export USERNS="host"
                    fi
                    docker_gid=$(getent group docker | cut -d: -f3)
                    export RUNAS="${UID}:${docker_gid}"
                elif [ "${SKUPPER_PLATFORM}" = "systemd" ]; then
                    export PLATFORM_COMMAND="skrouterd"
                fi
                ;;
            d)
                export DUMP_TOKENS=true
                export SKUPPER_TOKEN_OUTPUT_PATH="${OPTARG}"
                if [ -z "${SKUPPER_TOKEN_OUTPUT_PATH}" ] || [ ! -d "${SKUPPER_TOKEN_OUTPUT_PATH}" ]; then
                    echo "Output directory is not valid"
                    usage
                fi
                if [ ! -w "${SKUPPER_TOKEN_OUTPUT_PATH}" ]; then
                    echo "No permission to write tokens to provided output directory"
                    usage
                fi
                ;;
            x)
                export REMOVE=true
                ;;
            h)
                usage
                ;;
            *)
                usage
                ;;
        esac
    done
}

create_service() {
    # if systemd is not available, skip it
    ${SYSTEMCTL} list-units > /dev/null 2>&1 || return
    service_name="skupper-site-${SITE_NAME}.service"
    service_file_suffix="container"
    [ "${SKUPPER_PLATFORM}" = "systemd" ] && service_file_suffix="systemd"
    service_file="${SKUPPER_OUTPUT_PATH}/sites/${SITE_NAME}/runtime/scripts/${service_name}.${service_file_suffix}"

    if [ ! -f "${service_file}" ]; then
        echo "SystemD service has not been defined"
        return 0
    fi

    # Moving it to the appropriate location
    if [ "${UID}" -eq 0 ]; then
        cp "${service_file}" "/etc/systemd/system/${service_name}"
    else
        if [ ! -d "${SERVICE_DIR}" ]; then
            echo "Unable to define path to SystemD service"
            return
        fi
        cp "${service_file}" "${SERVICE_DIR}/${service_name}"
    fi

    ${SYSTEMCTL} enable --now "${service_name}"
    ${SYSTEMCTL} daemon-reload
}

remove_service() {
    service="skupper-site-${SITE_NAME}.service"
    ${SYSTEMCTL} stop ${service}
    ${SYSTEMCTL} disable ${service}
    rm -f "${SERVICE_DIR:?}/${service}"
    ${SYSTEMCTL} daemon-reload
    ${SYSTEMCTL} reset-failed
}

remove_site() {
    if [ ! -d "${SITES_PATH}/${SITE_NAME}" ]; then
        echo "Site \"${SITE_NAME}\" does not exist"
        exit 0
    fi

    echo "Removing Skupper site definition for: ${SITE_NAME}"
    SKUPPER_PLATFORM=$(grep '^platform: ' "${PLATFORM_FILE}" | sed -e 's/.*: //g')
    if [ "${SKUPPER_PLATFORM}" != "systemd" ]; then
        # removing router container
        ${SKUPPER_PLATFORM} rm -f ${SITE_NAME}-skupper-router
    fi
    # removing site definition
    rm -rf "${SITES_PATH:?}/${SITE_NAME:?}/"
}

dump_tokens() {
    tokens="$(ls "./${SITE_NAME}/runtime/token/")"
    if [ -z "${tokens}" ]; then
        echo "No tokens defined in this site bundle"
        return
    fi
    token_out_dir="${SKUPPER_TOKEN_OUTPUT_PATH:?}/${SITE_NAME:?}"
    mkdir -p "${token_out_dir}"
    cp "./${SITE_NAME}/runtime/token/"*.yaml "${token_out_dir}"
    echo "Tokens for site \"${SITE_NAME}\" have been saved into ${token_out_dir}"
}

set_router_access_port() {
    config_file="${SITES_PATH}/${SITE_NAME}/config/router/skrouterd.json"
    python "${SITES_PATH:?}/${SITE_NAME:?}/runtime/scripts/router_free_port.py" "${config_file}"
}

create_sed_script() {
    ssl_profile_base_path="\${SSL_PROFILE_BASE_PATH}"
    [ "${SKUPPER_PLATFORM}" = "systemd" ] && ssl_profile_base_path="${SITES_PATH}/${SITE_NAME}"
    container_engine="podman"
    [ "${SKUPPER_PLATFORM}" != "systemd" ] && container_engine="${SKUPPER_PLATFORM}"
    # populating sed script
    # note that this is processed a golang template prior to
    # being inserted into the bundle
    # shellcheck disable=SC1083
    {
        echo "s#{{"{{"}}.SiteNameSuffix{{"}}"}}#${SITE_ID}#g"
        echo "s#{{"{{"}}.Platform{{"}}"}}#${SKUPPER_PLATFORM}#g"
        echo "s#{{"{{"}}.SslProfileBasePath{{"}}"}}#${ssl_profile_base_path}#g"
        echo "s#{{"{{"}}.ContainerEngine{{"}}"}}#${container_engine}#g"
        echo "s#{{"{{"}}.SiteId{{"}}"}}#${SITE_ID}#g"
        echo "s#{{"{{"}}.SitesPath{{"}}"}}#${SITES_PATH}#g"
        echo "s#{{"{{"}}.RuntimeDir{{"}}"}}#${RUNTIME_DIR}#g"
        echo "s#{{"{{"}}.SiteScriptPath{{"}}"}}#${SITES_PATH}/${SITE_NAME}/runtime/scripts#g"
        echo "s#{{"{{"}}.SiteConfigPath{{"}}"}}#${SITES_PATH}/${SITE_NAME}/config/router#g"
        echo "s#{{"{{"}}.RunAs{{"}}"}}#${RUNAS}#g"
        echo "s#{{"{{"}}.UserNamespace{{"}}"}}#${USERNS}#g"
    } >> script.sed
}

render_sed_templates() {
    grep -rl '{{"{{"}}' "${SITES_PATH}/${SITE_NAME}" | xargs -r -i sed -f script.sed -i {}
    rm -f script.sed
}

show_token_info() {
    token_path="${SITES_PATH:?}/${SITE_NAME:?}/runtime/token"
    [ ! -d "${token_path}" ] && return
    tokens_found=$(find "${token_path}" -type f | wc -l)
    if [ "${tokens_found}" -gt 0 ]; then
        echo "Static tokens have been defined at: ${token_path}"
    fi
}

create_containers() {
    [ "${SKUPPER_PLATFORM}" = "systemd" ] && return
    "${SITES_PATH:?}/${SITE_NAME:?}/runtime/scripts/containers_create.sh"
}

create_site() {
    if [ -d "${SITES_PATH}/${SITE_NAME}" ]; then
        echo "Failed: site \"${SITE_NAME}\" is already defined"
        exit 1
    fi

    echo "Skupper site bundle installation"
    echo "Site name: ${SITE_NAME}"
    echo "Platform : ${SKUPPER_PLATFORM}"

    # Create base directory tree
    mkdir -p "${SITES_PATH}"

    # Installing site definition files
    cp -rf "./${SITE_NAME}" "${SITES_PATH}/${SITE_NAME}"

    # Creating platform.yaml
    echo "platform: ${SKUPPER_PLATFORM}" > "${PLATFORM_FILE}"

    # Adjust router normal access port
    set_router_access_port

    # Creating sed script to render template files at install time
    create_sed_script
    render_sed_templates

    # If bundle has tokens, show token location after site has been created
    show_token_info

    # Creating containers (container engine only)
    create_containers

    # Create systemd service
    create_service

    echo "Site \"${SITE_NAME}\" is now running"
}

sanity_check() {
    required_fields="SITE_NAME SKUPPER_OUTPUT_PATH SERVICE_DIR SITES_PATH SKUPPER_PLATFORM"
    required_commands="python sed find grep xargs tar getent id ${PLATFORM_COMMAND}"

    for field_name in ${required_fields}; do
        eval [ -n "\${${field_name}}" ] || exit_error "Internal error: required field ${field_name} not defined"
    done
    for cmd in ${required_commands}; do
        if ! command -v "${cmd}" > /dev/null 2>&1; then
            exit_error "A required command could not be found: ${cmd}"
        fi
    done
}

main() {
    # validate provided options
    parse_opts "$@"

    sanity_check

    if ${REMOVE}; then
        remove_site
        remove_service
        return
    elif ${DUMP_TOKENS}; then
        dump_tokens
        return
    fi

    create_site
}

main "$@"
