/*
Copyright 2021 The Skupper Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/skupperproject/skupper/pkg/apis/skupper/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClaimLister helps list Claims.
// All objects returned here must be treated as read-only.
type ClaimLister interface {
	// List lists all Claims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Claim, err error)
	// Claims returns an object that can list and get Claims.
	Claims(namespace string) ClaimNamespaceLister
	ClaimListerExpansion
}

// claimLister implements the ClaimLister interface.
type claimLister struct {
	indexer cache.Indexer
}

// NewClaimLister returns a new ClaimLister.
func NewClaimLister(indexer cache.Indexer) ClaimLister {
	return &claimLister{indexer: indexer}
}

// List lists all Claims in the indexer.
func (s *claimLister) List(selector labels.Selector) (ret []*v1alpha1.Claim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Claim))
	})
	return ret, err
}

// Claims returns an object that can list and get Claims.
func (s *claimLister) Claims(namespace string) ClaimNamespaceLister {
	return claimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClaimNamespaceLister helps list and get Claims.
// All objects returned here must be treated as read-only.
type ClaimNamespaceLister interface {
	// List lists all Claims in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Claim, err error)
	// Get retrieves the Claim from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Claim, error)
	ClaimNamespaceListerExpansion
}

// claimNamespaceLister implements the ClaimNamespaceLister
// interface.
type claimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Claims in the indexer for a given namespace.
func (s claimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Claim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Claim))
	})
	return ret, err
}

// Get retrieves the Claim from the indexer for a given namespace and name.
func (s claimNamespaceLister) Get(name string) (*v1alpha1.Claim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("claim"), name)
	}
	return obj.(*v1alpha1.Claim), nil
}
