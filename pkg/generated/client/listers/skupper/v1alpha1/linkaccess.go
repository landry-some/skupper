/*
Copyright 2021 The Skupper Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/skupperproject/skupper/pkg/apis/skupper/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LinkAccessLister helps list LinkAccesses.
// All objects returned here must be treated as read-only.
type LinkAccessLister interface {
	// List lists all LinkAccesses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinkAccess, err error)
	// LinkAccesses returns an object that can list and get LinkAccesses.
	LinkAccesses(namespace string) LinkAccessNamespaceLister
	LinkAccessListerExpansion
}

// linkAccessLister implements the LinkAccessLister interface.
type linkAccessLister struct {
	indexer cache.Indexer
}

// NewLinkAccessLister returns a new LinkAccessLister.
func NewLinkAccessLister(indexer cache.Indexer) LinkAccessLister {
	return &linkAccessLister{indexer: indexer}
}

// List lists all LinkAccesses in the indexer.
func (s *linkAccessLister) List(selector labels.Selector) (ret []*v1alpha1.LinkAccess, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LinkAccess))
	})
	return ret, err
}

// LinkAccesses returns an object that can list and get LinkAccesses.
func (s *linkAccessLister) LinkAccesses(namespace string) LinkAccessNamespaceLister {
	return linkAccessNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LinkAccessNamespaceLister helps list and get LinkAccesses.
// All objects returned here must be treated as read-only.
type LinkAccessNamespaceLister interface {
	// List lists all LinkAccesses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinkAccess, err error)
	// Get retrieves the LinkAccess from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LinkAccess, error)
	LinkAccessNamespaceListerExpansion
}

// linkAccessNamespaceLister implements the LinkAccessNamespaceLister
// interface.
type linkAccessNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LinkAccesses in the indexer for a given namespace.
func (s linkAccessNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LinkAccess, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LinkAccess))
	})
	return ret, err
}

// Get retrieves the LinkAccess from the indexer for a given namespace and name.
func (s linkAccessNamespaceLister) Get(name string) (*v1alpha1.LinkAccess, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("linkaccess"), name)
	}
	return obj.(*v1alpha1.LinkAccess), nil
}
