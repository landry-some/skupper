version: 2.1
orbs:
    docker: circleci/docker@1.0.1
    kube-orb: circleci/kubernetes@0.11.0
    go: circleci/go@1.1.1

executors:
  local_cluster_test_executor:
    machine:
      image: circleci/classic:latest

commands:
  minikube-install:
    description: Installs the minikube executable onto the system.
    parameters:
    steps:
      - run:
          command: >-
            curl -Lo minikube
            https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && 
            chmod +x minikube && sudo
            mv minikube /usr/local/bin/
          name: Install Minikube Executable

  minikube-start:
    description: Starts the minikube service.
    steps:
      - run:
          command: >-
            minikube start --vm-driver=docker --cpus 2 --memory 2048
          name: Start Minikube Cluster

  minikube-start-load-balancer:
    description: Starts the minikube tunnel
    steps:
      - run:
          command: minikube tunnel
          name: Start Minikube Tunnel
          background: true

  prepare_for_local_cluster_tests:
    description: install right versions of go, docker, kubectl, and also build
    steps:
      - run:
          #TODO add a comment saying why is this needed.
          name: Export environment variables persistent in execution shell
          command: |
            echo 'export KUBECONFIG=/home/circleci/.kube/config' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> $BASH_ENV
            echo 'export SKUPPER_SERVICE_CONTROLLER_IMAGE=${CI_SERVICE_CONTROLLER_IMAGE}:${CIRCLE_SHA1}' >> $BASH_ENV
            echo 'export SKUPPER_SITE_CONTROLLER_IMAGE=${CI_SITE_CONTROLLER_IMAGE}:${CIRCLE_SHA1}' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run:
          name: cleanup previous go installation
          command: sudo rm -rf /usr/local/go
      - docker/install-docker
      - go/install
      - kube-orb/install-kubectl
      - run: make

  run_cluster_tests:
    description: run all e2e tests inside the current KUBECONFIG configured cluster
    parameters:
      args:
        default: ""
        type: string
    steps:
      - run:
          name: Run Integration Tests
          command: go test -tags=integration -v ./test/integration/...
      - run:
          name: Run client tests in real cluster
          command: go test -v -count=1 ./client -use-cluster

yaml-templates:
  release_filters: &release_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /[0-9].*/

  compile_go_executable: &compile_go_executable
    run:
      name: Compile Go Executable
      command: |
        VERSION="${CIRCLE_TAG:-ci-${CIRCLE_BUILD_NUM}}"
        go build -ldflags "-X main.version=${VERSION}" -o dist/${PLATFORM:-${GOOS}-${GOARCH}}/skupper${EXESUFFIX} ./cmd/skupper

  store_dist: &store_dist
    persist_to_workspace:
      root: .
      paths:
        - dist

  images_environment: &images_environment
    CI_SERVICE_CONTROLLER_IMAGE: quay.io/nicob87/service-controller
    CI_SITE_CONTROLLER_IMAGE: quay.io/nicob87/site-controller

workflows:
  version: 2.1
  build-workflow:
    jobs:
      - build-linux-amd64
      - build-darwin-amd64
      - build-windows-amd64
      - test
      - test_makefile

      - minikube_local_cluster_tests:
          requires:
            - docker/publish
          pre-steps:
            - prepare_for_local_cluster_tests

      - build-linux-386:
          <<: *release_filters
      - build-darwin-386:
          <<: *release_filters
      - build-windows-386:
          <<: *release_filters
      - build-linux-arm:
          <<: *release_filters
      - build-linux-arm64:
          <<: *release_filters

      - publish-github-release:
          <<: *release_filters
          requires:
            - build-linux-386
            - build-linux-amd64
            - build-darwin-386
            - build-darwin-amd64
            - build-windows-386
            - build-windows-amd64
            - build-linux-arm
            - build-linux-arm64
            - test
            - test_makefile
            - minikube_local_cluster_tests

      - docker/publish:
          executor: docker/docker
          use-remote-docker: true
          #remote-docker-dlc: true #option not enabled in my plan
          dockerfile: Dockerfile.service-controller
          registry: quay.io
          image: nicob87/service-controller

      - remove_from_registry:
          requires:
            - docker/publish
            - minikube_local_cluster_tests



jobs:
  test_makefile:
    executor:
      name: go/default
      tag: "1.13"
    steps:
      - setup_remote_docker
      - checkout
      - run: make
      - run: make docker-build
      - run: make package
      - run: make clean

  remove_from_registry:
    environment:
      <<: *images_environment
    executor:
      name: go/default
      tag: "1.13"
    steps:
      - setup_remote_docker
      - run: docker login quay.io -u ${DOCKER_LOGIN} -p ${DOCKER_PASSWORD}
      - run: go get github.com/genuinetools/reg
      - run: reg rm ${CI_SERVICE_CONTROLLER_IMAGE}:${CIRCLE_SHA1}

  build-linux-amd64: &go_build
    executor:
      name: go/default
      tag: "1.13"
    environment: &environment
      GOOS: linux
      GOARCH: amd64
      PLATFORM: linux-amd64
    steps:
      - checkout
      - go/mod-download-cached
      - <<: *compile_go_executable
      - <<: *store_dist

  build-linux-386:
    <<: *go_build
    environment:
      GOOS: linux
      GOARCH: 386
      PLATFORM: linux-i386

  build-windows-386:
    <<: *go_build
    environment:
      GOOS: windows
      GOARCH: 386
      PLATFORM: windows-i386
      EXESUFFIX: ".exe"

  build-windows-amd64:
    <<: *go_build
    environment:
      GOOS: windows
      GOARCH: amd64
      PLATFORM: windows-amd64
      EXESUFFIX: ".exe"

  build-darwin-386:
    <<: *go_build
    environment:
      GOOS: darwin
      GOARCH: 386
      PLATFORM: mac-i386

  build-darwin-amd64:
    <<: *go_build
    environment:
      GOOS: darwin
      GOARCH: amd64
      PLATFORM: mac-amd64

  build-linux-arm:
    <<: *go_build
    environment:
      GOOS: linux
      GOARCH: arm
      PLATFORM: linux-arm32

  build-linux-arm64:
    <<: *go_build
    environment:
      GOOS: linux
      GOARCH: arm64
      PLATFORM: linux-arm64

  test:
    executor:
      name: go/default
      tag: "1.13"
    steps:
      - checkout
      - go/mod-download-cached
      - go/test

  minikube_local_cluster_tests:
    executor: local_cluster_test_executor
    environment:
      <<: *images_environment
    steps:
      - run: echo "skupper_image = ${SKUPPER_SERVICE_CONTROLLER_IMAGE}"
      - minikube-install
      - minikube-start
      - minikube-start-load-balancer
      - run: kubectl cluster-info
      - run_cluster_tests

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Create a Draft Release on GitHub"
          command: |
            VERSION="$CIRCLE_TAG"
            BASEDIR=`pwd`
            mkdir "${BASEDIR}/archives"
            for p in `ls dist` ; do
              cd "$BASEDIR/dist/$p"
              if [[ $p == windows* ]] ; then
                zip -q "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.zip" *
              else
                tar -zcf "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.tgz" *
              fi
            done
            cd ${BASEDIR}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace -prerelease -draft ${VERSION} "${BASEDIR}/archives"
